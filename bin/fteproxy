#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This file is part of fteproxy.
#
# fteproxy is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# fteproxy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with fteproxy.  If not, see <http://www.gnu.org/licenses/>.


import sys
import os
import signal
import glob
import argparse
import threading

if hasattr(sys, "frozen"):
    sys.path.append(
        os.path.abspath(os.path.join(os.path.dirname(sys.executable))))
else:
    sys.path.append(
        os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import fte
import fte.conf
import fte.server
import fte.client

FTE_PT_NAME = 'fte'


class FTEMain(threading.Thread):

    def __init__(self, args):
        threading.Thread.__init__(self)
        self._args = args

    def run(self):
        self._client = None
        self._server = None

        if not self._args.quiet and not self._args.managed:
            print """fteproxy Copyright (C) 2012-2013 Kevin P. Dyer <kdyer@cs.pdx.edu>
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it under certain conditions.
"""

        if self._args.mode == 'test':
            test()
            sys.exit(0)
        if self._args.stop:
            if not self._args.mode:
                print '--mode keyword is required with --stop'
                sys.exit(1)
            if self._args.mode in ['client', 'server']:
                pid_files_path = \
                    os.path.join(fte.conf.getValue('general.pid_dir'),
                                 '.' + self._args.mode + '-*.pid')
                pid_files = glob.glob(pid_files_path)
                for pid_file in pid_files:
                    with open(pid_file) as f:
                        pid = int(f.read())
                        try:
                            os.kill(pid, signal.SIGINT)
                        except OSError:
                            pass
                        os.unlink(pid_file)
                sys.exit(0)
        if self._args.mode == 'client':
            fte.conf.setValue('runtime.mode', 'client')
        elif self._args.mode == 'server':
            fte.conf.setValue('runtime.mode', 'server')
        else:
            fte.conf.setValue('runtime.mode', 'client')
        if self._args.client_ip:
            fte.conf.setValue('runtime.client.ip', self._args.client_ip)
        if self._args.client_port:
            fte.conf.setValue('runtime.client.port',
                              int(self._args.client_port))
        if self._args.server_ip:
            fte.conf.setValue('runtime.server.ip', self._args.server_ip)
        if self._args.server_port:
            fte.conf.setValue('runtime.server.port',
                              int(self._args.server_port))
        if self._args.proxy_ip:
            fte.conf.setValue('runtime.proxy.ip', self._args.proxy_ip)
        if self._args.proxy_port:
            fte.conf.setValue('runtime.proxy.port',
                              int(self._args.proxy_port))
        if self._args.downstream_format:
            fte.conf.setValue('runtime.state.downstream_language',
                              self._args.downstream_format)
        if self._args.upstream_format:
            fte.conf.setValue('runtime.state.upstream_language',
                              self._args.upstream_format)
        if self._args.release:
            fte.conf.setValue('fte.defs.release', self._args.release)
        if self._args.key:
            if len(self._args.key) != 64:
                print 'Invalid key length: ' + str(len(self._args.key)) + ', should be 64'
                sys.exit(1)
            try:
                binary_key = self._args.key.decode('hex')
            except:
                print 'Invalid key format, must contain only 0-9a-fA-F'
                sys.exit(1)
            fte.conf.setValue('runtime.fte.encrypter.key', binary_key)

        pid_file = os.path.join(fte.conf.getValue('general.pid_dir'),
                                '.' + fte.conf.getValue('runtime.mode')
                                + '-' + str(os.getpid()) + '.pid')

        with open(pid_file, 'w') as f:
            f.write(str(os.getpid()))

        if fte.conf.getValue('runtime.mode') == 'client':
            incoming_regex = fte.defs.getRegex(self._args.downstream_format)
            incoming_fixed_slice = fte.defs.getMaxLen(self._args.downstream_format)
            fte.encoder.RegexEncoder(incoming_regex, incoming_fixed_slice)
            outgoing_regex = fte.defs.getRegex(self._args.upstream_format)
            outgoing_fixed_slice = fte.defs.getMaxLen(self._args.upstream_format)
            fte.encoder.RegexEncoder(outgoing_regex, outgoing_fixed_slice)

            if self._args.managed:
                do_managed_client()
            else:

                if not self._args.quiet:
                    print 'Client ready!'

                local_ip = fte.conf.getValue('runtime.client.ip')
                local_port = fte.conf.getValue('runtime.client.port')
                remote_ip = fte.conf.getValue('runtime.server.ip')
                remote_port = fte.conf.getValue('runtime.server.port')
                self._client = fte.client.listener(local_ip, local_port,
                                                   remote_ip, remote_port)
                self._client.daemon = True
                self._client.start()
                self._client.join()
        elif fte.conf.getValue('runtime.mode') == 'server':

            languages = fte.defs.load_definitions()
            for language in languages.keys():
                regex = fte.defs.getRegex(language)
                max_len = fte.defs.getMaxLen(language)
                fte.encoder.RegexEncoder(regex, max_len)

            if self._args.managed:
                do_managed_server()
            else:
                local_ip = fte.conf.getValue('runtime.server.ip')
                local_port = fte.conf.getValue('runtime.server.port')
                remote_ip = fte.conf.getValue('runtime.proxy.ip')
                remote_port = fte.conf.getValue('runtime.proxy.port')
                self._server = fte.server.listener(local_ip, local_port,
                                                   remote_ip, remote_port)
                self._server.daemon = True
                self._server.start()
                if not self._args.quiet:
                    print 'Server ready!'
                self._server.join()

    def stop(self):
        if self._client is not None:
            self._client.stop()
        if self._server is not None:
            self._server.stop()


def do_managed_client():

    from twisted.internet import reactor, error

    import obfsproxy.common.transport_config as transport_config
    import obfsproxy.transports.transports as transports
    import obfsproxy.common.log as logging

    from pyptlib.client import ClientTransportPlugin
    from pyptlib.config import EnvError

    import pprint

    log = logging.get_obfslogger()

    """Start the managed-proxy protocol as a client."""

    should_start_event_loop = False

    ptclient = ClientTransportPlugin()
    try:
        ptclient.init([FTE_PT_NAME])
    except EnvError, err:
        log.warning("Client managed-proxy protocol failed (%s)." % err)
        return

    log.debug("pyptlib gave us the following data:\n'%s'",
              pprint.pformat(ptclient.getDebugData()))

    for transport in ptclient.getTransports():
        # Will hold configuration parameters for the pluggable transport
        # module.
        pt_config = transport_config.TransportConfig()
        pt_config.setStateLocation(ptclient.config.getStateLocation())

        try:
            addrport = fte.launch_transport_listener(
                transport, None, 'socks', None, pt_config)
        except transports.TransportNotFound:
            log.warning("Could not find transport '%s'" % transport)
            ptclient.reportMethodError(transport, "Could not find transport.")
            continue
        except error.CannotListenError:
            log.warning("Could not set up listener for '%s'." % transport)
            ptclient.reportMethodError(transport, "Could not set up listener.")
            continue

        should_start_event_loop = True
        log.debug("Successfully launched '%s' at '%s'" %
                  (transport, log.safe_addr_str(str(addrport))))
        ptclient.reportMethodSuccess(transport, "socks4", addrport, None, None)

    ptclient.reportMethodsEnd()

    if should_start_event_loop:
        log.info("Starting up the event loop.")
        reactor.run()
    else:
        log.info("No transports launched. Nothing to do.")


def do_managed_server():
    from twisted.internet import reactor, error

    from pyptlib.server import ServerTransportPlugin
    from pyptlib.config import EnvError

    import obfsproxy.transports.transports as transports
    import obfsproxy.common.log as logging
    import obfsproxy.common.transport_config as transport_config

    import pprint

    log = logging.get_obfslogger()

    """Start the managed-proxy protocol as a server."""

    should_start_event_loop = False

    ptserver = ServerTransportPlugin()
    try:
        ptserver.init([FTE_PT_NAME])
    except EnvError, err:
        log.warning("Server managed-proxy protocol failed (%s)." % err)
        return

    log.debug("pyptlib gave us the following data:\n'%s'",
              pprint.pformat(ptserver.getDebugData()))

    ext_orport = ptserver.config.getExtendedORPort()
    authcookie = ptserver.config.getAuthCookieFile()
    orport = ptserver.config.getORPort()
    server_transport_options = ptserver.config.getServerTransportOptions()
    for transport, transport_bindaddr in ptserver.getBindAddresses().items():

        # Will hold configuration parameters for the pluggable transport
        # module.
        pt_config = transport_config.TransportConfig()
        pt_config.setStateLocation(ptserver.config.getStateLocation())
        transport_options = ""
        if server_transport_options and transport in server_transport_options:
            transport_options = server_transport_options[transport]
            pt_config.setServerTransportOptions(transport_options)

        try:
            if ext_orport:
                addrport = fte.launch_transport_listener(transport,
                                                         transport_bindaddr,
                                                         'ext_server',
                                                         ext_orport,
                                                         pt_config,
                                                         ext_or_cookie_file=authcookie)
            else:
                addrport = fte.launch_transport_listener(transport,
                                                         transport_bindaddr,
                                                         'server',
                                                         orport,
                                                         pt_config)
        except transports.TransportNotFound:
            log.warning("Could not find transport '%s'" % transport)
            ptserver.reportMethodError(transport, "Could not find transport.")
            continue
        except error.CannotListenError:
            log.warning("Could not set up listener for '%s'." % transport)
            ptserver.reportMethodError(transport, "Could not set up listener.")
            continue

        should_start_event_loop = True

        # Include server transport options in the log message if we got 'em
        extra_log = ""
        if transport_options:
            extra_log = " (server transport options: '%s')" % str(
                transport_options)
        log.debug("Successfully launched '%s' at '%s'%s" %
                  (transport, log.safe_addr_str(str(addrport)), extra_log))

        # Report success for this transport.
        # (We leave the 'options' as None and let pyptlib handle the
        # SMETHOD argument sending.)
        ptserver.reportMethodSuccess(transport, addrport, None)

    ptserver.reportMethodsEnd()

    if should_start_event_loop:
        log.info("Starting up the event loop.")
        reactor.run()
    else:
        log.info("No transports launched. Nothing to do.")


def test():
    import unittest

    import fte.tests.encoder
    import fte.tests.encrypter
    import fte.tests.record_layer
    import fte.tests.bit_ops
    import fte.tests.relay
    import fte.tests.dfa
    import fte.tests.cDFA

    import yappi
    yappi.start()

    suite_encoder = unittest.TestLoader().loadTestsFromTestCase(
        fte.tests.encoder.TestEncoders)
    suite_encrypter = unittest.TestLoader().loadTestsFromTestCase(
        fte.tests.encrypter.TestEncoders)
    suite_record_layer = unittest.TestLoader().loadTestsFromTestCase(
        fte.tests.record_layer.TestEncoders)
    suite_relay = unittest.TestLoader().loadTestsFromTestCase(
        fte.tests.relay.TestRelay)
    suite_bit_ops = unittest.TestLoader().loadTestsFromTestCase(
        fte.tests.bit_ops.TestEncoders)
    suite_dfa = unittest.TestLoader().loadTestsFromTestCase(
        fte.tests.dfa.TestDFA)
    suite_cdfa = unittest.TestLoader().loadTestsFromTestCase(
        fte.tests.cDFA.TestcDFA)
    suites = [
        suite_bit_ops,
        suite_encoder,
        suite_encrypter,
        suite_relay,
        suite_record_layer,
        suite_dfa,
        suite_cdfa,
    ]
    alltests = unittest.TestSuite(suites)
    unittest.TextTestRunner(verbosity=2, failfast=True).run(alltests)

    yappi.print_stats(sort_type=yappi.SORTTYPE_TTOT)

def get_args():
    parser = argparse.ArgumentParser(prog='fteproxy',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--mode',
                        default='client',
                        metavar='(client|server|test)',
                        help='Relay mode: client or server')
    parser.add_argument('--stop', action='store_true',
                        help='Shutdown daemon process')
    parser.add_argument('--upstream-format',
                        help='Client-to-server language format',
                        default=fte.conf.getValue('runtime.state.upstream_language'
                                                  ))
    parser.add_argument('--downstream-format',
                        help='Server-to-client language format',
                        default=fte.conf.getValue('runtime.state.downstream_language'
                                                  ))
    parser.add_argument('--client_ip',
                        help='Client-side listening IP',
                        default=fte.conf.getValue('runtime.client.ip'
                                                  ))
    parser.add_argument('--client_port',
                        help='Client-side listening port',
                        default=fte.conf.getValue('runtime.client.port'
                                                  ))
    parser.add_argument('--server_ip',
                        help='Server-side listening IP',
                        default=fte.conf.getValue('runtime.server.ip'
                                                  ))
    parser.add_argument('--server_port',
                        help='Server-side listening port',
                        default=fte.conf.getValue('runtime.server.port'
                                                  ))
    parser.add_argument('--proxy_ip',
                        help='Forwarding-proxy (SOCKS) listening IP',
                        default=fte.conf.getValue('runtime.proxy.ip'
                                                  ))
    parser.add_argument('--proxy_port',
                        help='Forwarding-proxy (SOCKS) listening port',
                        default=fte.conf.getValue('runtime.proxy.port'
                                                  ))
    parser.add_argument('--quiet', action='store_true', default=False)
    parser.add_argument('--release',
                        help='Definitions file to use, specified as YYYYMMDD',
                        default=fte.conf.getValue('fte.defs.release'))
    parser.add_argument('--managed',
                        help="Start in managed mode, for use with Tor. --server parameters ignored.",
                        action='store_true',
                        default=False)
    parser.add_argument('--key',
                        help='Cryptographic key, hex, must be exactly 64 characters',
                        default=fte.conf.getValue('runtime.fte.encrypter.key'
                                                  ))
    args = parser.parse_args(sys.argv[1:])

    return args


def main():
    global running

    try:
        args = get_args()
        main = FTEMain(args)
        if args.managed:
            main.run()
        else:
            main.daemon = True
            main.start()
            while running and main.is_alive():
                main.join(0.01)
            main.stop()
    except KeyboardInterrupt:
        pass
    except IOError:
        pass
    finally:
        if fte.conf.getValue('runtime.mode'):
            pid_file = os.path.join(fte.conf.getValue('general.pid_dir'
                                                      ), '.'
                                    + fte.conf.getValue('runtime.mode')
                                    + '-' + str(os.getpid()) + '.pid')
            if pid_file and os.path.exists(pid_file):
                os.unlink(pid_file)


if __name__ == '__main__':
    running = True

    def signal_handler(signal, frame):
        global running
        running = False
    signal.signal(signal.SIGINT, signal_handler)

    main()
    sys.exit(0)
